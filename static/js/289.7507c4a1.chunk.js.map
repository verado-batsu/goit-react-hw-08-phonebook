{"version":3,"file":"static/js/289.7507c4a1.chunk.js","mappings":"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","sources":["components/ContactForm/schema.js","components/ContactForm/addMethodContactFormYup.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/ContactList/useFilterContacts.js","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import * as yup from 'yup';\n\nimport { isValidName, isValidPhone } from './addMethodContactFormYup';\n\nconst nameRegex = \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\";\nconst invalidNameMessage =\n    \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\";\n\nyup.addMethod(yup.string, 'isValidName', isValidName);\n\nyup.addMethod(yup.string, 'isValidPhone', isValidPhone);\n\nconst phoneRegex =\n    /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\nconst invalidPhoneMessage =\n    'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +';\n\nexport const schema = yup.object({\n    name: yup.string().isValidName(nameRegex, invalidNameMessage).required(),\n    number: yup\n        .string()\n        .isValidPhone(phoneRegex, invalidPhoneMessage)\n        .min(7)\n        .max(12)\n        .required(),\n});","export function isValidName(validate, message) {\n  return this.test(\"isValidName\", message, function (value) {\n\t  const { path, createError } = this;\n\n\t  if (!value.match(validate)) {\n      return createError({\n        path,\n        message: message ?? \"INVALID_FORMAT_ERROR_MESSAGE\"\n      });\n    }\n\n    return true;\n  });\n}\n\nexport function isValidPhone(validate, message) {\n  return this.test(\"isValidName\", message, function (value) {\n\t  const { path, createError } = this;\n\n\t  if (!value.match(validate)) {\n      return createError({\n        path,\n        message: message ?? \"INVALID_FORMAT_ERROR_MESSAGE\"\n      });\n    }\n\n    return true;\n  });\n}\n\n","import { Formik, Field, ErrorMessage, Form } from 'formik';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport {\n    Box,\n    Button,\n    FormControl,\n    FormLabel,\n    FormErrorMessage,\n    Input,\n    VStack,\n} from '@chakra-ui/react';\n\nimport { schema } from './schema';\nimport {\n    useAddContactMutation,\n    useFetchContactsQuery,\n} from 'redux/contacts/contactsApi';\n\nexport function ContactForm() {\n    const [addContact, { error }] = useAddContactMutation();\n\n    error && Notify.failure(error.data.message);\n\n    const { data: contacts } = useFetchContactsQuery();\n\n    const initialValues = {\n        name: '',\n        number: '',\n    };\n\n    const handleSubmit = (values, { resetForm }) => {\n        let isNameRepeat = false;\n        contacts.map(contact => {\n            if (contact.name.toLowerCase() === values.name.toLowerCase()) {\n                Notify.failure(`${contact.name} is already in contacts.`);\n                isNameRepeat = true;\n            }\n            return null;\n        });\n\n        if (isNameRepeat) {\n            return;\n        } else {\n            addContact(values);\n            resetForm();\n            return;\n        }\n    };\n\n    return (\n        <Box\n            border=\"2px\"\n            borderColor=\"gray.200\"\n            bg=\"white\"\n            p={6}\n            rounded=\"md\"\n            w=\"100%\t\"\n        >\n            <Formik\n                initialValues={initialValues}\n                onSubmit={handleSubmit}\n                validationSchema={schema}\n            >\n                {({ errors }) => {\n                    return (\n                        <Form>\n                            <VStack spacing={4} align=\"flex-start\">\n                                <FormControl isInvalid={errors.name}>\n                                    <FormLabel>\n                                        <p>Name</p>\n                                        <Field\n                                            as={Input}\n                                            type=\"text\"\n                                            name=\"name\"\n                                            variant=\"filled\"\n                                        />\n                                    </FormLabel>\n                                    <ErrorMessage\n                                        name=\"name\"\n                                        component={FormErrorMessage}\n                                    />\n                                </FormControl>\n                                <FormControl isInvalid={errors.number}>\n                                    <FormLabel>\n                                        <p>Number</p>\n                                        <Field\n                                            as={Input}\n                                            type=\"tel\"\n                                            name=\"number\"\n                                            variant=\"filled\"\n                                        />\n                                    </FormLabel>\n                                    <ErrorMessage\n                                        name=\"number\"\n                                        component={FormErrorMessage}\n                                    />\n                                </FormControl>\n                                <Button\n                                    type=\"submit\"\n                                    colorScheme=\"purple\"\n                                    width=\"full\"\n                                >\n                                    Add contact\n                                </Button>\n                            </VStack>\n                        </Form>\n                    );\n                }}\n            </Formik>\n        </Box>\n    );\n}\n","import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Card, CardBody, Text, Button, Center } from '@chakra-ui/react';\nimport { Oval } from 'react-loader-spinner';\n\nimport {\n    useDeleteContactMutation,\n    useFetchContactsQuery,\n} from 'redux/contacts/contactsApi';\nimport { useFilterContacts } from './useFilterContacts';\n\nexport function ContactList() {\n    const { data, isFetching, error } = useFetchContactsQuery();\n    const [deleteContact] = useDeleteContactMutation();\n\n    const filteredContacts = useFilterContacts(data);\n\n    function handleDeleteClick(e) {\n        deleteContact(e.target.id);\n    }\n\n    return (\n        <ul>\n            {filteredContacts.length > 0 &&\n                filteredContacts.map(({ id, name, number }) => {\n                    return (\n                        <li key={id}>\n                            <Card key={id}>\n                                <CardBody>\n                                    <Text as=\"b\">Name: {name}</Text>\n                                    <Text>Number: {number}</Text>\n                                </CardBody>\n                                <Button\n                                    id={id}\n                                    colorScheme=\"red\"\n                                    type=\"button\"\n                                    onClick={handleDeleteClick}\n                                >\n                                    Delete\n                                </Button>\n                            </Card>\n                        </li>\n                    );\n                })}\n            {isFetching && (\n                <Center>\n                    <Oval\n                        height={40}\n                        width={40}\n                        color=\"#4fa94d\"\n                        wrapperStyle={{}}\n                        wrapperClass=\"\"\n                        visible={true}\n                        ariaLabel=\"oval-loading\"\n                        secondaryColor=\"#4fa94d\"\n                        strokeWidth={2}\n                        strokeWidthSecondary={2}\n                    />\n                </Center>\n            )}\n            {error && Notify.failure(error)}\n        </ul>\n    );\n}\n","import { useSelector } from \"react-redux\";\nimport { selectFilter } from \"redux/selectors\";\n\nexport const useFilterContacts = (contacts) => {\n\tconst filter = useSelector(selectFilter);\n\n\tconst normalizedFilter = filter.toLowerCase();\n\n    const filteredContacts = contacts\n\t\t? contacts.filter(contact => {\n\t\t\treturn contact.name.toLowerCase().includes(normalizedFilter);\n\t\t})\n\t\t: [];\n\t\n\treturn filteredContacts\n}","import { FormLabel, Input, Text } from '@chakra-ui/react';\nimport { useDispatch } from 'react-redux';\n\nimport { setFilter } from 'redux/filterSlice';\n\nexport function Filter() {\n    const dispatch = useDispatch();\n\n    function handleChange(e) {\n        dispatch(setFilter(e.target.value));\n    }\n\n    return (\n        <FormLabel>\n            <Text fontSize=\"lg\">Find contacts by name</Text>\n            <Input\n                variant=\"outline\"\n                placeholder=\"Enter name\"\n                name=\"filter\"\n                type=\"text\"\n                onChange={handleChange}\n            />\n        </FormLabel>\n    );\n}\n","import { Box, Flex, Text } from '@chakra-ui/react';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\n\nexport default function ContactsPage() {\n    return (\n        <Flex w=\"100%\" gap=\"5\">\n            <Box w=\"50%\">\n                <Text fontSize=\"3xl\">Phonebook</Text>\n                <ContactForm />\n            </Box>\n\n            <Box w=\"50%\">\n                <Text fontSize=\"3xl\">Contacts</Text>\n                <Filter />\n\n                <ContactList />\n            </Box>\n        </Flex>\n    );\n}\n"],"names":["yup","validate","message","this","test","value","path","createError","match","schema","name","isValidName","required","number","isValidPhone","min","max","ContactForm","useAddContactMutation","addContact","error","Notify","data","contacts","useFetchContactsQuery","border","borderColor","bg","p","rounded","w","initialValues","onSubmit","values","resetForm","isNameRepeat","map","contact","toLowerCase","validationSchema","errors","spacing","align","isInvalid","as","Input","type","variant","component","FormErrorMessage","colorScheme","width","ContactList","isFetching","useDeleteContactMutation","deleteContact","filteredContacts","normalizedFilter","useSelector","selectFilter","filter","includes","useFilterContacts","handleDeleteClick","e","target","id","length","onClick","height","color","wrapperStyle","wrapperClass","visible","ariaLabel","secondaryColor","strokeWidth","strokeWidthSecondary","Filter","dispatch","useDispatch","fontSize","I","placeholder","onChange","setFilter","ContactsPage","gap"],"sourceRoot":""}